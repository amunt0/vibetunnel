#!/usr/bin/env bash

# VibeTunnel Linux Launcher
# This script replaces the macOS menu bar app functionality for Linux systems

set -euo pipefail

# Configuration
DEFAULT_PORT=4020
DEFAULT_HOST="127.0.0.1"
CONFIG_DIR="$HOME/.config/vibetunnel"
LOG_FILE="$CONFIG_DIR/vibetunnel.log"
PID_FILE="$CONFIG_DIR/vibetunnel.pid"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Create config directory
init_config() {
    mkdir -p "$CONFIG_DIR"
    
    # Create default config if it doesn't exist
    if [[ ! -f "$CONFIG_DIR/config.json" ]]; then
        cat > "$CONFIG_DIR/config.json" << EOF
{
  "port": $DEFAULT_PORT,
  "host": "$DEFAULT_HOST",
  "auth": {
    "enabled": true,
    "type": "system"
  },
  "dashboard": {
    "password": null
  },
  "tunneling": {
    "tailscale": {
      "enabled": false
    },
    "ngrok": {
      "enabled": false,
      "authToken": null
    }
  },
  "logging": {
    "level": "info",
    "file": "$LOG_FILE"
  }
}
EOF
        log "Created default configuration at $CONFIG_DIR/config.json"
    fi
}

# Find vibetunnel server
find_server() {
    local server_path=""
    
    # Check if we're in development mode (running from source)
    if [[ -f "web/dist/server.js" ]]; then
        server_path="web/dist/server.js"
    elif [[ -f "dist/server.js" ]]; then
        server_path="dist/server.js"
    elif [[ -f "/usr/local/bin/vibetunnel-server" ]]; then
        server_path="/usr/local/bin/vibetunnel-server"
    elif [[ -f "/usr/bin/vibetunnel-server" ]]; then
        server_path="/usr/bin/vibetunnel-server"
    else
        log_error "Could not find VibeTunnel server binary"
        log_error "Please ensure VibeTunnel is properly installed or run from source directory"
        exit 1
    fi
    
    echo "$server_path"
}

# Check if server is running
is_running() {
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            # PID file exists but process is dead, clean it up
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

# Start the server
start_server() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        log_warning "VibeTunnel is already running (PID: $pid)"
        return 0
    fi
    
    local server_path=$(find_server)
    local config_file="$CONFIG_DIR/config.json"
    
    log "Starting VibeTunnel server..."
    log "Server: $server_path"
    log "Config: $config_file"
    log "Logs: $LOG_FILE"
    
    # Ensure log file exists
    touch "$LOG_FILE"
    
    # Start server in background
    if command -v bun >/dev/null 2>&1; then
        # Use Bun if available (faster)
        nohup bun "$server_path" --config "$config_file" >> "$LOG_FILE" 2>&1 &
    elif command -v node >/dev/null 2>&1; then
        # Fall back to Node.js
        nohup node "$server_path" --config "$config_file" >> "$LOG_FILE" 2>&1 &
    else
        log_error "Neither Bun nor Node.js found. Please install one of them."
        exit 1
    fi
    
    local pid=$!
    echo "$pid" > "$PID_FILE"
    
    # Wait a moment to check if it started successfully
    sleep 2
    
    if is_running; then
        local port=$(jq -r '.port // 4020' "$config_file")
        local host=$(jq -r '.host // "127.0.0.1"' "$config_file")
        
        log_success "VibeTunnel started successfully (PID: $pid)"
        log_success "Dashboard: http://$host:$port"
        log "Use 'vt' command to create terminal sessions"
        log "Logs: tail -f $LOG_FILE"
    else
        log_error "Failed to start VibeTunnel server"
        log_error "Check logs: $LOG_FILE"
        exit 1
    fi
}

# Stop the server
stop_server() {
    if ! is_running; then
        log_warning "VibeTunnel is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    log "Stopping VibeTunnel server (PID: $pid)..."
    
    # Graceful shutdown
    kill -TERM "$pid" 2>/dev/null || true
    
    # Wait for graceful shutdown
    local count=0
    while ps -p "$pid" > /dev/null 2>&1 && [[ $count -lt 10 ]]; do
        sleep 1
        count=$((count + 1))
    done
    
    # Force kill if still running
    if ps -p "$pid" > /dev/null 2>&1; then
        log_warning "Graceful shutdown failed, forcing termination..."
        kill -KILL "$pid" 2>/dev/null || true
    fi
    
    rm -f "$PID_FILE"
    log_success "VibeTunnel stopped"
}

# Restart the server
restart_server() {
    log "Restarting VibeTunnel..."
    stop_server
    sleep 1
    start_server
}

# Show server status
status_server() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        local config_file="$CONFIG_DIR/config.json"
        local port=$(jq -r '.port // 4020' "$config_file" 2>/dev/null || echo "4020")
        local host=$(jq -r '.host // "127.0.0.1"' "$config_file" 2>/dev/null || echo "127.0.0.1")
        
        log_success "VibeTunnel is running (PID: $pid)"
        log "Dashboard: http://$host:$port"
        log "Config: $config_file"
        log "Logs: $LOG_FILE"
        
        # Show active sessions if server is responding
        if command -v curl >/dev/null 2>&1; then
            local sessions=$(curl -s "http://$host:$port/api/sessions" 2>/dev/null || echo "[]")
            local count=$(echo "$sessions" | jq length 2>/dev/null || echo "0")
            log "Active sessions: $count"
        fi
    else
        log_warning "VibeTunnel is not running"
        return 1
    fi
}

# Show logs
show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        if [[ "${1:-}" == "-f" ]]; then
            tail -f "$LOG_FILE"
        else
            tail -n 50 "$LOG_FILE"
        fi
    else
        log_warning "No log file found at $LOG_FILE"
    fi
}

# Install systemd service
install_service() {
    local service_file="$HOME/.config/systemd/user/vibetunnel.service"
    local launcher_path=$(realpath "$0")
    
    mkdir -p "$HOME/.config/systemd/user"
    
    cat > "$service_file" << EOF
[Unit]
Description=VibeTunnel Terminal Multiplexer
After=network.target

[Service]
Type=forking
ExecStart=$launcher_path start
ExecStop=$launcher_path stop
ExecReload=$launcher_path restart
Restart=on-failure
RestartSec=5
PIDFile=$PID_FILE

[Install]
WantedBy=default.target
EOF
    
    systemctl --user daemon-reload
    log_success "Systemd service installed at $service_file"
    log "Enable autostart: systemctl --user enable vibetunnel.service"
    log "Start service: systemctl --user start vibetunnel.service"
}

# Print usage
usage() {
    cat << EOF
VibeTunnel Linux Launcher

USAGE:
    vibetunnel-linux [COMMAND] [OPTIONS]

COMMANDS:
    start           Start the VibeTunnel server
    stop            Stop the VibeTunnel server
    restart         Restart the VibeTunnel server
    status          Show server status
    logs            Show recent logs
    logs -f         Follow logs in real-time
    install-service Install systemd user service
    config          Edit configuration file
    help            Show this help message

CONFIGURATION:
    Config file: $CONFIG_DIR/config.json
    Log file: $LOG_FILE
    
EXAMPLES:
    vibetunnel-linux start          # Start the server
    vibetunnel-linux status         # Check if running
    vibetunnel-linux logs -f        # Watch logs
    vibetunnel-linux install-service # Set up autostart

Once running, use the 'vt' command to create terminal sessions:
    vt --shell                      # Interactive shell
    vt npm run dev                  # Run command in browser
EOF
}

# Main command handler
main() {
    init_config
    
    case "${1:-help}" in
        start)
            start_server
            ;;
        stop)
            stop_server
            ;;
        restart)
            restart_server
            ;;
        status)
            status_server
            ;;
        logs)
            show_logs "${2:-}"
            ;;
        install-service)
            install_service
            ;;
        config)
            "${EDITOR:-nano}" "$CONFIG_DIR/config.json"
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"